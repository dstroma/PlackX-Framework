#!perl
use v5.36;

#######################################################################
# Main module

package My::Example::App {
	use PlackX::Framework;
}

#######################################################################
# For demonstrating filters

package My::Example::App::Util {
	use builtin 'trim';
	no warnings 'experimental';
	sub multitrim (@instrings) {
		no warnings 'uninitialized';
		my @outstrings;
		foreach my $string (@instrings) {
			my @lines = split /\n/, $string;
			@lines = map { trim $_ } @lines;
			$string = join '', @lines;
			push @outstrings, $string;
		}
		return @outstrings;
	}
}

#######################################################################
# Main controller

package My::Example::App::Controller {
	use My::Example::App::Router;

	my $app_name    = "My Example App";
	my %credentials = ( username => "joe", password => "schmoe" );

	my $style = q{
		<style type="text/css">
			body {
				color: #333; font-family: Tahoma, Sans-serif;
				margin: 1em;
			}
			form {
				border: 1px solid #ddd;
				padding: 1em;
			}
			form label {
				display: block;
			}
			form input {
				display: block;
				margin-top: 0.25em;
				margin-bottom: 0.75em;
			}
		</style>
	};

	# Demonstrate a filter - add signature
	filter after => sub ($request, $response) {
		$response->print('<!--Generated by PlackX::Framework My::Example::App-->');
		return $response->continue;
	};

	# Another filter -- remove whitespace
	filter after => sub ($request, $response) {
		my @body = ref $response->body ? $response->body->@* : $response->body;
		@body = My::Example::App::Util::multitrim(@body);
		$response->body(\@body);
		return $response->continue;
	};

	# Root request
	request '/' => sub ($request, $response) {
		my $body = qq{
			<html>
				<head><title>$app_name: Welcome</title>$style</head>
				<body>
					<h1>$app_name</h1>
					<p>Please <a href="/login">Log In</a> to continue.</p>
				</body>
			</html>
		};
		$response->print($body);
		return $response;
	};

	# Different route
	request '/login' => sub ($request, $response) {
		my $message = $request->stash->{'message'} || 'Enter your credentials below.';
		my $want_method = $request->param('method') // 'post';
		my $body = qq {
			<html>
				<head><title>$app_name: Log In</title>$style</head>
				<body>
					<h1>$app_name: Log In</h1>
					<p>$message</p>
					<form method="$want_method" action="/login/submit">
						<label>Username: <input type="text" name="username"></label>
						<label>Password: <input type="text" name="password"></label>
						<input type="submit" value="Log In">
					</form>
				</body>
			</html>
		};
		$response->print($body);
		return $response;
	};

	# Demonstrate HTTP request method
	request { post => '/login/submit' } => sub ($request, $response) {
		my $username = $request->param('username');
		my $password = $request->param('password');

		unless ($username eq $credentials{'username'} and $password eq $credentials{'password'}) {
			$request->stash->{'message'} = "Incorrect username or password. Try user 'joe' password 'schmoe'.";
			return $request->reroute('/login');
		}
		
		my $body = qq {
			<html>
				<head><title>$app_name: Hello $username</title>$style</head>
				<body>
					<h1>$app_name</h1>
					<p>Welcome back, $username.</p>
				</body>
			</html>
		};
		$response->print($body);
		return $response;
	};

	request { get => '/login/submit' } => sub ($request, $response) {
		my $uri_censored = $request->urix;
		$uri_censored->query_set(password => 'XXXXX');
		my $body = qq {
			<html>
				<head><title>GET form</title>$style</head>
				<body>
					<h1>$app_name: Login Failed</h1>
					<p>You cannot login with a GET request. The URL you tried to access is (the password is censored):</p>
					<p style="margin:0.2em 1em; font-style:italic">$uri_censored</p>
				</body>
			</html>
		};
		$response->print($body);
		return $response;	
	};

	# Demonstrate a callback (cleanup handler)
	request '/callback' => sub ($request, $response) {
		$response->add_post_response_callback(sub ($env) {
			warn "help - Cleanup callback! Sleeping for 5 seconds. $request $response\n";
			warn( ($env->{'psgix.cleanup'} ? '(server supports cleanup handler)' : '(cleanup NOT supported)') . "\n");
			sleep 5;
		});
		$response->print("Callback added. Request $request, response $response.");
		return $response;
	};

	# Demonstrate flash
	request '/flash/set/:message' => sub ($request, $response) {
		$response->flash($request->route_param('message'));
		$response->redirect('/flash/view');
		return $response;
	};
	request '/flash/view' => sub ($request, $response) {
		$response->print($request->flash);
		return $response;
	};
}

#######################################################################
# Routing without DSL

package My::Example::App::Controller::NoDSL {

	My::Example::App::Router->add_route('/nodsl/:pagenum/view' => 'nodsl');

	sub nodsl ($request, $response) {
		my $page = $request->route_param('pagenum');
		$response->print('No DSL!<br>');
		$response->print("You are viewing page $page.<br>\n");
		$response->print("(Note: Filters do not work for this style at the present time.)\n");
		return $response;
	}
}

#######################################################################
# Return the application coderef

My::Example::App->app;

