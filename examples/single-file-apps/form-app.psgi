#!perl
use v5.36;

#######################################################################
# Main module

package PXF::Example::FormApp {
	use PlackX::Framework;
}

#######################################################################
# Set up routes using Router DSL

package PXF::Example::FormApp::Routes {
  use PXF::Example::FormApp::Router;

  our $counter = 0;

  my $app_name    = 'My Example App';
  my %credentials = (username => 'larry', password => 'perl');

  my $style = <<~INDENTED_HEREDOC;
    body {
      color: #333; font-family: Tahoma, Sans-serif;
      margin: 1em;
    }
    form {
      border: 1px solid #ddd;
      padding: 1em;
    }
    form label {
      display: block;
    }
    form input {
      display: block;
      margin-top: 0.25em;
      margin-bottom: 0.75em;
    }
    INDENTED_HEREDOC

  # Filters, a bad way to to do templating
  filter before => sub ($request, $response) {
    my $title = __PACKAGE__;
    $response->print(qq{
      <!DOCTYPE html>
      <html>
        <head>
          <title>$title</title>
          <style>$style</style>
        </head>
        <body>
    });
    return;
  };

  filter after => sub ($request, $response) {
    $response->print("</body></html>\n");
    return;
  };

  # Demonstrate a global filter - add signature
  global_filter after => sub ($request, $response) {
    return unless $response->content_type =~ m|text/html|;
    $response->print("\n\n<!--Generated by PXF::Example::FormApp, a PlackX::Framework-based application-->\n");
    return; # return nothing to continue
  };

  # Root request
  route '/' => sub ($request, $response) {
    $response->print(qq{
      <h1>$app_name</h1>
      <p>Please <a href="/login">Log In</a> to continue.</p>
    });
    return $response;
  };

  # Different route
  route '/login' => sub ($request, $response) {
    my $message     = $request->stash->{'message'} || 'Enter your credentials below.';
    my $want_method = $request->param('method') // 'post';
    $response->print(qq{
      <h1>$app_name: Log In</h1>
      <p>$message</p>
      <form method="$want_method" action="/login/submit">
        <label>Username: <input type="text" name="username"></label>
        <label>Password: <input type="text" name="password"></label>
        <input type="submit" value="Log In">
      </form>
    });
    return $response;
  };

  # Demonstrate HTTP request method
  route { post => ['/login-submit','/login/submit'] } => sub ($request, $response) {
    my $username = $request->param('username');
    my $password = $request->param('password');

    unless ($username eq $credentials{'username'} and $password eq $credentials{'password'}) {
      # Here we show the login page again with the "reroute" feature.
      # We could also use the flash_redirect feature instead.
      $request->stash->{'message'} = "Incorrect username ($username) or password ($password).";
      return $request->reroute('/login');
    }

    $response->print(qq{
      <h1>$app_name</h1>
      <p>Welcome back, $username.</p>
    });

    return $response;
  };

  route { get => '/login/submit' } => sub ($request, $response) {
    $response->status(405);
    $response->print(qq{
      <h1>Method Not Allowed</h1>
      <p>You cannot login with a GET request. Please try again.</p>
    });
    return $response;
  };

  # Demonstrate a callback (cleanup handler)
  route '/callback' => sub ($request, $response) {
    my $supports_cleanup = $request->env->{'psgix.cleanup'};

    $response->add_cleanup_callback(sub ($env) {
      say "Cleanup callback: sleeping for 1 second...";
      say "(server does not support cleanup callbacks, so this will cause blocking...)" unless $supports_cleanup;
      sleep 1;
      $counter++;
    });
    $response->print(qq{
      <h1>Cleanup Callback Example</h1>
      <p>Callback added. Request $request, response $response.</p>
    });
    $response->print("Server does NOT support cleanup!") unless $supports_cleanup.
    return $response;
  };

  # Demonstrate flash
  route '/flash/set/:message' => sub ($request, $response) {
    $response->flash($request->route_param('message'));
    $response->redirect('/flash/view');
    return $response;
  };

  route '/flash/view' => sub ($request, $response) {
    $response->print('Flash message shown below!');
    $response->print('If you refresh the page, it will disappear.');
    $response->print($request->flash);
    return $response;
  };
}

#######################################################################
# Routing without DSL

package PXF::Example::FormApp::Routes::NonDSL {
  use PXF::Example::FormApp::Router ();

  # Add routes (actions can be coderefs or names of functions as strings)
  PXF::Example::FormApp::Router->add_route('/page/{pagenum:\d+}/view' => 'page_nondsl');

  # Route actions
  sub page_nondsl ($request, $response) {
    my $page = $request->route_param('pagenum');
    $response->print('<h1>No DSL Example</h1>');
    $response->print("You are viewing page $page.<br>\n");
    return $response;
  }
}

#######################################################################
# Return the application coderef

PXF::Example::FormApp->app;
